<script lang="ts">
	import { onMount } from "svelte";
    
    const API_MULTIPLIER = 1000000
    let gamestate = $state('rest')
    let response: any = $state(null)
    let endRoundResponse = $state(null)
    let balance = $state(1000)
    let lastWin = $state(0)

    const getParam = (key: string) => new URLSearchParams(window.location.search).get(key);
    async function getRGSResponse(endpoint: string, body: any): Promise<any> {
        const url = `https://${getParam('rgs_url')}${endpoint}`
        try {
            const res = await fetch(url, {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            })

            if (!res.ok) {
                const text = await res.text().catch(() => '')
                const details = {
                    method: 'POST',
                    url,
                    status: res.status,
                    statusText: res.statusText,
                    body
                }
                console.error(`API Request failed: POST ${url} - Status: ${res.status} ${res.statusText}`, { ...details, responseText: text })
                throw Object.assign(new Error(`HTTP ${res.status} ${res.statusText}`), { ...details, responseText: text })
            }

            // Try parse JSON explicitly to catch parse errors and log context
            try {
                return await res.json()
            } catch (e: any) {
                console.error('API Request failed: JSON parse error', { url, method: 'POST', error: e?.message })
                throw e
            }
        } catch (e: any) {
            // Network error or thrown above
            if (!e || !(e instanceof Error)) {
                console.error('API Request failed:', { method: 'POST', url, error: e })
            }
            throw e
        }
    }

    onMount(async () => {
        try {
            const auth = await getRGSResponse('/wallet/authenticate', {
                sessionID: getParam('sessionID'),
                language: getParam('language') || 'en'  
            });
            balance = auth.balance.amount / API_MULTIPLIER
            console.log('loaded..')
        } catch (err) {
            console.error('Authenticate failed', err)
        }
    });

    const endRound = async () => {
        try {
            const confirmation = await getRGSResponse('/wallet/end-round', {
                sessionID: getParam("sessionID")
            });
            balance = confirmation.balance.amount / API_MULTIPLIER
            endRoundResponse = confirmation
            if(confirmation?.balance.amount != null) {
              gamestate = 'rest'
            }
        } catch (err) {
            console.error('End round failed', err)
        }
    }

    async function getBookResponse() {
      try {
        if(gamestate == 'rest'){
          balance -= 1
        }
        const resp = await getRGSResponse('/wallet/play', {
            mode: getParam('mode') ?? "BASE",
            currency: getParam('currency'),
            sessionID: getParam('sessionID'),
            amount: 1 * API_MULTIPLIER
        });
        endRoundResponse = null
        response = resp
        gamestate = 'playing'
        if(response != null ){
          lastWin = response.round.payoutMultiplier
        }
        if(lastWin == undefined){
          gamestate = 'rest'
          lastWin = 0
        }
        console.log(lastWin)
        console.log(resp.round.state)
      } catch (err) {
        // Revert optimistic balance deduction on failure
        if (gamestate === 'rest') {
          balance += 1
        }
        console.error('Play failed', err)
      }
    }
</script>

<div class="game-wrapper">
  <div class="game-content">
    <button onclick={getBookResponse}>Place Bet</button>
    <button onclick={endRound}>End Round</button>
    <h2>Balance: ${balance}</h2>
    <h2>Round Win: ${lastWin}</h2>
  </div>

  <div class="json-stack">
    <h3>play/ response</h3>
    <div class="bet-display">
      <pre>{JSON.stringify(response, null, 2)}</pre>
    </div>

    <h3>end-round/ response</h3>
    <div class="end-display">
      <pre>{JSON.stringify(endRoundResponse, null, 2)}</pre>
    </div>
  </div>
</div>
